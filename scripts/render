#!/usr/bin/env node

const fs = require('fs')
const { promisify } = require('util')
const marked = require('marked')
const imageSize = promisify(require('image-size'))

async function main () {
  const path = process.argv[2]

  const md = fs.readFileSync(path, 'utf8')
    .split('\n')
    .map(line => {
      if (!line.startsWith('!')) {
        return line
      }

      if (line.startsWith('![')) {
        return line
      }

      const [prefix, caption] = line.split('"')
      let [name, path] = prefix.replace(/^!:?/, '').split(' ')
      const thumb = line.startsWith('!:')
      const image = `/photos/${thumb ? 'thumb' : 'hd'}/${name}.jpg`

      path = path || `/photos/${name}.html`

      if (caption) {
        return `[![${name}](${image}) *${caption}*](${path})`
      }

      return `[![${name}](${image})](${path})`
    })
    .join('\n')

  const title = md.slice(0, md.indexOf('\n')).replace(/^# /, '')

  let head = fs.readFileSync('head.html', 'utf8')
    .replace('<title>', `<title>${title}`)

  if (path === 'index.md') {
    head = head.replace('<body>', '<body class="home">')
  }

  process.stdout.write(head)

  let html = marked(md).replaceAll('.md"', '.html"')

  const refPattern = /src="\/([^"]*.jpg)"/g
  const refs = html.match(refPattern).map(ref => ref.slice('src="/'.length, -1))
  const sizeIndex = {}

  await Promise.all(refs.map(async ref => {
    sizeIndex[ref] = await imageSize(`dist/${ref}`)
  }))

  html = html.replace(refPattern, (match, ref) => {
    const { width, height } = sizeIndex[ref]
    return `src="/${ref}" width="${width}" height="${height}"`
  })

  if (path.startsWith('20')) {
    html = html.replace('<p>', '<p class="date">')
  }

  process.stdout.write(html)
  process.stdout.write(fs.readFileSync('foot.html', 'utf8'))
}

main()
