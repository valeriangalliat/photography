#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const readline = require('readline')
const cp = require('child_process')
const escape = require('escape-html')
const { exiftool } = require('exiftool-vendored')

const baseUrl = 'https://photography.codejam.info/'
const exiftoolArgs = ['-fast2', '-ImageWidth', '-ImageHeight', '-DateTimeOriginal', '-Make', '-Model', '-FocalLength', '-FocalLengthIn35mmFormat', '-Aperture', '-Shutterspeed', '-ISO']

const head = fs.readFileSync('head.html', 'utf8')
const foot = fs.readFileSync('foot.html', 'utf8')

async function buildIndex () {
  const index = { titles: {}, links: {} }

  const [photos, files] = await Promise.all([
    fs.promises.readdir('dist/photos/full'),
    fs.promises.readdir('.')
  ])

  for (const photo of photos) {
    index.links[path.parse(photo).name] = []
  }

  const sources = files
    .filter(name => name.startsWith('20') || name.endsWith('.md'))
    .filter(name => name !== 'README.md')

  const grep = cp.spawn('grep', ['-REo', '(^| )![^\\[ :]+?( |$)', ...sources])
  const rl = readline.createInterface({ input: grep.stdout })

  rl.on('line', line => {
    const [ref, match] = line.split(':')
    const name = match.trim().slice(1)

    if (!(ref in index.titles)) {
      index.titles[ref] = ''

      const rl = readline.createInterface({ input: fs.createReadStream(ref) })

      rl.once('line', line => {
        index.titles[ref] = line.replace(/^# /, '')
        rl.close()
      })
    }

    index.links[name] = index.links[name] || []
    index.links[name].push(ref)
  })

  return new Promise(resolve => rl.on('close', () => resolve(index)))
}

async function getCachedExif (name) {
  try {
    return JSON.parse(await fs.promises.readFile(`cache/exif/${name}.json`, 'utf8'))
  } catch (err) {
    if (err.code !== 'ENOENT') {
      throw err
    }
  }

  const exif = await exiftool.readRaw(`dist/photos/full/${name}.jpg`, exiftoolArgs)

  await fs.promises.writeFile(`cache/exif/${name}.json`, JSON.stringify(exif))

  return exif
}

function renderTable (name, exif) {
  const rows = []

  const date = exif.DateTimeOriginal && exif.DateTimeOriginal
    .split('-')[0]
    .replace(':', '-')
    .replace(':', '-')
    .replace(' ', 'T')

  const fields = [
    ['Name', name],
    ['Original resolution', `${exif.ImageWidth}x${exif.ImageHeight} (<a href="/about.html#contact">contact me</a> for the full fize)`],
    ['Date', date],
    ['Make', exif.Make],
    ['Model', exif.Model],
    ['Focal length', exif.FocalLength],
    ['Focal length (35 mm equivalent)', exif.FocalLengthIn35mmFormat],
    ['Aperture', exif.Aperture],
    ['Shutter speed', exif.ShutterSpeed],
    ['ISO', exif.ISO]
  ]

  for (const [name, value] of fields) {
    if (value) {
      rows.push(`      <tr>
        <th>${name}</th>
        <td>${value}</td>
      </tr>`)
    }
  }

  return `    <table>\n${rows.join('\n')}\n    </table>`
}

async function render (index, name) {
  console.log(name)

  const title = `ðŸ“¸ ${name}`
  const exif = await getCachedExif(name)

  let style = ''
  let page = ''

  if (exif.ImageWidth / exif.ImageHeight > 16 / 9) {
    // Allow image to overflow for panoramas.
    style = ' style="max-width: none"'
  }

  const image = `${baseUrl}photos/sd/${name}.jpg`

  const metaTags = `  <meta property="og:title" content="${escape(title)}">
  <meta property="og:image" content="${escape(image)}">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:site" content="@valeriangalliat">
  <meta name="twitter:creator" content="@valeriangalliat">
`

  page += head
    .replace('<html ', '<html class="photo" ')
    .replace('<title>', `<title>${escape(title)}`)
    .replace('</head>', `${metaTags}</head>`)
    .replace(
      '<div class="content">',
      `<div class="photo-container">
    <a href="/photos/hd/${name}.jpg">
      <img src="/photos/hd/${name}.jpg"${style}>
    </a>
  </div>
  <div class="content">`)

  page += `${renderTable(name, exif)}
    <ul class="references">
`

  for (const link of index.links[name]) {
    page += `      <li><a href="/${link.replace(/\.md$/, '.html')}">${index.titles[link]}</a></li>\n`
  }

  page += '    </ul>\n'
  page += foot

  await fs.promises.writeFile(`dist/photos/${name}.html`, page)
}

async function main () {
  const index = await buildIndex()

  await fs.promises.mkdir('cache/exif', { recursive: true })

  const batches = [[]]

  for (const photo of Object.keys(index.links)) {
    const batch = batches[0]
    batch.push(photo)

    if (batch.length >= 8) {
      batches.unshift([])
    }
  }

  for (const batch of batches) {
    await Promise.all(batch.map(name => render(index, name)))
  }

  exiftool.end()
}

main()
