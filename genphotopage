#!/usr/bin/env node

const { exiftool } = require('exiftool-vendored')
const fs = require('fs')
const path = require('path')

const photo = process.argv[2]
const name = path.basename(photo).split('.')[0]

const head = fs.readFileSync(path.resolve(__dirname, 'head.html'), 'utf8')
  .replace('<title>', `<title>ðŸ“· ${name}`)
  .replace('<body>', '<body class="photo">')

const foot = fs.readFileSync('foot.html', 'utf8')

exiftool.read(photo)
  .then(exif => {
    let style = ``

    if (exif.ImageWidth / exif.ImageHeight > 16 / 9) {
      // Allow image to overflow for panoramas.
      style = `style="max-width: none"`
    }

    process.stdout.write(head.replace(
      '<div class="markdown-body">',
      `<div class="photo-container">
    <a href="/photos/full/${name}.jpg">
      <img src="/photos/hd/${name}.jpg"${style}>
    </a>
  </div>
  <div class="markdown-body">`))

    process.stdout.write(`    <table>
      <tr>
        <th>Name</th>
        <td>${name}</td>
      </tr>
      <tr>
        <th>Date</th>
        <td>${exif.DateTimeOriginal.toISOString().split('.')[0]}</td>
      </tr>
      <tr>
        <th>Make</th>
        <td>${exif.Make}</td>
      </tr>
      <tr>
        <th>Model</th>
        <td>${exif.Model}</td>
      </tr>
      <tr>
        <th>Focal length</th>
        <td>${exif.FocalLength}</td>
      </tr>
      <tr>
        <th>Focal length (35 mm equivalent)</th>
        <td>${exif.FocalLengthIn35mmFormat}</td>
      </tr>
      <tr>
        <th>Aperture</th>
        <td>${exif.Aperture}</td>
      </tr>
      <tr>
        <th>Shutter speed</th>
        <td>${exif.ShutterSpeed}</td>
      </tr>
      <tr>
        <th>ISO</th>
        <td>${exif.ISO}</td>
      </tr>
    </table>
`)

    process.stdout.write(foot)

    return exiftool.end()
  })
